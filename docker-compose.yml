version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: iot_monitor_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d iot_monitor_db -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - iot-network

  timescaledb:
    image: timescale/timescaledb-postgis:latest-pg13
    environment:
      POSTGRES_DB: sensor_data_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - iot-network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - iot-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - iot-network
      
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - iot-network

  eureka-server:
    build:
      context: ./mvsc-eureka 
    ports:
      - "8761:8761"
    environment:
      - SERVER_PORT=8761
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8761/"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 20s
    networks:
      - iot-network

  config-server:
    build:
      context: ./config-server
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5 
      start_period: 20s
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: file:///config
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
      EUREKA_CLIENT_FETCH_REGISTRY: false
    volumes:
      - ./config:/config:ro
    networks:
      - iot-network

  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "9090:9090"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      SPRING_CLOUD_CONFIG_WATCH_ENABLED: "false"
      SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED: "false"
      SERVER_PORT: 9090
    networks:
      - iot-network

  device-registration-service:
    build:
      context: ./msvc-device-registration-service
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_CLOUD_CONFIG_WATCH_ENABLED: "false"
      SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED: "false"
      SPRING_PROFILES_ACTIVE: native
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/iot_monitor_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - iot-network
  
  telemetry-ingestion-service:
    build:
      context: ./telemetry-ingestion-service
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_CLOUD_CONFIG_WATCH_ENABLED: "false"
      SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED: "false"
      SPRING_PROFILES_ACTIVE: native
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8090:8080"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - iot-network

  data-processing-service:
    build:
      context: ./data-processing-service
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_CLOUD_CONFIG_WATCH_ENABLED: "false"
      SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED: "false"
      SPRING_PROFILES_ACTIVE: native
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://timescaledb:5432/sensor_data_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    ports:
      - "8084:8080"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - iot-network
volumes:
  postgres_data:
  timescaledb_data:

networks:
  iot-network:
    driver: bridge